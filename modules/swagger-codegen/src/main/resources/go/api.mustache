{{>partial_header}}
package {{packageName}}

{{#operations}}
import (
	"strings"
	"fmt"
	"errors"
	"net/url"
	{{#imports}}"{{import}}"
{{/imports}}
)

type {{classname}} struct {
	Configuration Configuration
}

// New{{classname}} ...
func New{{classname}}() *{{classname}} {
	configuration := NewConfiguration()
	return &{{classname}}{
		Configuration: *configuration,
	}
}

// New{{classname}}WithBasePath ...
func New{{classname}}WithBasePath(basePath string) *{{classname}} {
	configuration := NewConfiguration()
	configuration.BasePath = basePath

	return &{{classname}}{
		Configuration: *configuration,
	}
}
{{#operation}}

/**
 * {{summary}}{{#notes}}
 * {{notes}}{{/notes}}
 *
{{#allParams}} * @param {{paramName}} {{description}}
{{/allParams}} * @return {{#returnType}}{{^isListContainer}}*{{/isListContainer}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}
 */
func (a {{{classname}}}) {{{nickname}}}(headerParams map[string]string, {{#allParams}}{{paramName}} {{{dataType}}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) ({{#returnType}}{{^isListContainer}}*{{/isListContainer}}{{{returnType}}}, {{/returnType}}*APIResponse, error) {

	var httpMethod = "{{httpMethod}}"
	// create path and map variables
	path := a.Configuration.BasePath + "{{path}}"{{#pathParams}}
	path = strings.Replace(path, "{"+"{{baseName}}"+"}", fmt.Sprintf("%v", {{paramName}}), -1){{/pathParams}}

	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte

	{{#hasQueryParams}}
	{{#queryParams}}
	{{#isListContainer}}
	var collectionFormat = "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}"
	if collectionFormat == "multi" {
		for _, value := range {{paramName}} {
			queryParams.Add("{{paramName}}", value)
		}
	} else {
		queryParams.Add("{{paramName}}", a.Configuration.APIClient.ParameterToString({{paramName}}, collectionFormat))
	}
	{{/isListContainer}}
	{{^isListContainer}}
		queryParams.Add("{{paramName}}", a.Configuration.APIClient.ParameterToString({{paramName}}, ""))
	{{/isListContainer}}
	{{/queryParams}}{{/hasQueryParams}}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ {{#consumes}}"{{{mediaType}}}", {{/consumes}} }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		{{#produces}}"{{{mediaType}}}",
{{/produces}}	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}{{#hasHeaderParams}}

{{#headerParams}}	// header params "{{baseName}}"
	headerParams["{{baseName}}"] = {{paramName}}
{{/headerParams}}{{/hasHeaderParams}}{{#hasFormParams}}
{{#formParams}}{{#isFile}}
	fbs, _ := ioutil.ReadAll(file)
	fileBytes = fbs
	fileName = file.Name(){{/isFile}}
{{^isFile}}	formParams["{{paramName}}"] = {{paramName}}{{/isFile}}{{/formParams}}{{/hasFormParams}}{{#hasBodyParam}}
{{#bodyParams}}	// body params
	postBody = &{{paramName}}
{{/bodyParams}}{{/hasBodyParam}}
{{#returnType}}	var successPayload = new({{returnType}}){{/returnType}}
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil || httpResponse.StatusCode() < 200 || httpResponse.StatusCode() > 299 {
		return {{#returnType}}{{#isListContainer}}*{{/isListContainer}}successPayload, {{/returnType}}NewAPIResponse(httpResponse.RawResponse), err
	}
{{#returnType}}
	err = json.Unmarshal(httpResponse.Body(), &successPayload){{/returnType}}
	return {{#returnType}}{{#isListContainer}}*{{/isListContainer}}successPayload, {{/returnType}}NewAPIResponse(httpResponse.RawResponse), err
}
{{/operation}}{{/operations}}
